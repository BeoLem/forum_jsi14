<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= page.title %></title>
    <%- include('../partials/components.ejs') %>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/marked/4.2.4/marked.min.js"
      integrity="sha512-nwWBb9WFoP7Q0hkeTjUPmHkkYLnmYgYnZ8PvQVVL2XJ9RLCGuLqKe86bhmZ3CJXGU8F777uuPkDQTkZ2qAuyvA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
  </head>
  <body>
    <div class="interaction">
      <div class="toasts"></div>
      <%- include('../partials/sidebar.ejs') %>
      <div id="content">
        <div id="header" class="header">
          <img class="avatar" src="" alt="" />
          <span
            >Posted by
            <a class="username" href="/users/contentHeaderUsername"></a>
          </span>
          <span
            class="timestamp"
            data-bs-toggle="tooltip"
            data-bs-placement="bottom"
            title="Tooltip on bottom"
          ></span>
        </div>

        <div id="main">
          <h3 class="title"></h3>
          <div class="description"></div>
        </div>

        <div class="tools">
          <button
            class="editButton authorOnly"
            onclick="location.href = '/blogs/edit/<%= params.id %>'"
          >
            <i class="fa-solid fa-pen-to-square"></i> Edit
          </button>
          <button
            class="deleteButton authorOnly"
            title="Delete this blog"
            onclick="deleteBlog(this)"
          >
            <i class="fa-solid fa-trash-can"></i> Delete
          </button>
        </div>

        <div class="comments">
          <form id="commentHeader">
            <% if(!locals.user.id) { %>
            <span>
              <a class="username" href="/auth/login">Log in</a>
              to comment
            </span>
            <% } else { %>
            <span
              >Comment as
              <a class="username" href="/users/<%= locals.user.id %>"
                ><%= locals.user.username %></a
              >
            </span>
            <textarea
              name="textComment"
              class="textComment createComment"
              placeholder="What are your thoughts?"
            ></textarea>
            <button class="commentButton toolButton" type="submit">
              <i class="fa-solid fa-comments"></i> Comment
            </button>
            <% } %>
          </form>

          <div class="list"></div>
        </div>
      </div>
    </div>
  </body>
  <script type="text/javascript">
    const id = "<%= blogId %>" || "<%= params.id %>";
    let editing = false;

    document.addEventListener("DOMContentLoaded", () => {
      jQuery(document).ready(async function ($) {
        showLoadingIcon();

        try {
          blogFetchData = await $.ajax({
            url: `/api/blogs/${id}`,
            method: "GET",
            accepts: "application/json",
            contentType: "application/json",
          });
        } catch (err) {
          console.log(err);
          $("#content").css("display", "none");
          hideLoadingIcon();
          if (!err.responseJSON)
            return displayErrorToast("I couldn't connect to the server!");
          return displayErrorToast(err.responseJSON.message);
        }

        const blog = blogFetchData.data;

        if (!blog) {
          hideLoadingIcon();
          return displayErrorToast("I couldn't retrieve the blog information!");
        }

        console.log(blog);

        const postedDate = new Date(0);
        postedDate.setUTCSeconds(blog.timestamp.seconds);

        // Bootstrap Tooltip
        var timestampSpan = $("#content #header .timestamp");
        timestampSpan.html(ElapsedTimeConverter(postedDate));
        // timestampSpan.title = postedDate;

        $("[data-bs-toggle=tooltip]").tooltip();

        // Edit username
        var headerUsername = $("#content #header span a");
        var authorName = "";

        try {
          authorFetchData = await $.ajax({
            url: `/api/users/${blog.author}`,
            method: "GET",
            accepts: "application/json",
            contentType: "application/json",
          });
        } catch (err) {
          console.log(err);
          hideLoadingIcon();
          if (!err.responseJSON)
            return displayErrorToast("I couldn't connect to the server!");
          return displayErrorToast(err.responseJSON.message);
          authorName = `Unknown`;
        }

        authorName = authorFetchData.user.username;
        headerUsername.text(authorName);
        headerUsername.attr(
          "href",
          headerUsername
            .attr("href")
            .replace("contentHeaderUsername", blog.author)
        );

        // Edit title
        $("#main .title").html(blog.title);

        let maxDescriptionWidthContainer = $("#main").innerWidth() + "px";
        // Edit description
        $("#main .description").html(marked.parse(blog.description));

        // Edit image css
        let contentImgs = $("img");
        contentImgs.each((i) => {
          contentImgs[i].style.maxWidth = maxDescriptionWidthContainer;
        });

        // Edit avatar
        $("#content #header .avatar").attr(
          "src",
          `https://avatars.dicebear.com/api/initials/${authorName}.svg`
        );

        window.addEventListener("resize", () => {
          maxDescriptionWidthContainer = $("#main").innerWidth() + "px";
          contentImgs.each((i) => {
            contentImgs[i].style.maxWidth = maxDescriptionWidthContainer;
          });
        });

        if (blog.author == "<%= locals.user.id %>") {
          let authorOnlyTools = $(".authorOnly");

          authorOnlyTools.each(
            (v) => (authorOnlyTools[v].style.display = "block")
          );
        }

        hideLoadingIcon();

        // Comment Submit
        $("form#commentHeader").submit(() => {
          event.preventDefault();
          createComment($(".commentButton.toolButton"));
        });

        loadComments();
      });
    });

    async function deleteBlog(button) {
      let confirmation = prompt(
        `Are you sure you want to delete this blog? If you want to continue, please enter "${id}" to continue`
      );

      if (!confirmation) return;
      else if (confirmation != id)
        return displayErrorToast("You provided the wrong ID!");

      button.setAttribute("disabled", "disabled");
      button.classList.toggle("disabled");
      button.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
              <span>Handling...</span>`;

      try {
        deleteFetchData = await $.ajax({
          url: `/api/blogs/${id}`,
          method: "DELETE",
          accepts: "application/json",
          contentType: "application/json",
          headers: {
            authorization: '<%= cookies.accessToken || "" %>',
          },
        });
      } catch (err) {
        console.log(err);
        button.removeAttribute("disabled");
        button.toggleClass("disabled");
        button.innerHTML = `<i class="fa-solid fa-trash-can"></i> Delete`;
        if (!err.responseJSON)
          return displayErrorToast("I couldn't connect to the server!");
        return displayErrorToast(err.responseJSON.message);
      }
      if (
        deleteFetchData.statusCode >= 200 &&
        deleteFetchData.statusCode < 300
      ) {
        displayNotiToast("Deleted the blog successfully");
        location.href = "/";
      } else {
        displayErrorToast(deleteFetchData.message);
      }
    }

    async function createComment(button) {
      const textarea = $("textarea.textComment.createComment");
      if (!textarea)
        return displayErrorToast(
          "An error occured while loading the page! Please reload the page."
        );
      const value = textarea.val();
      if (!value || value == "")
        return displayErrorToast("Please fill in the description!");

      textarea.attr("disabled", "disabled");
      button.attr("disabled", "disabled");
      button.toggleClass("disabled");
      button.html(`<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
              <span>Handling...</span>`);

      let data;
      try {
        data = await $.ajax("/api/comments/", {
          method: "POST",
          accepts: "application/json",
          data: JSON.stringify({
            id,
            description: value,
          }),
          contentType: "application/json",
          headers: {
            authorization: "<%= cookies.accessToken %>",
          },
        });
      } catch (err) {
        textarea.removeAttr("disabled");
        button.removeAttr("disabled");
        button.toggleClass("disabled");
        button.html(`<i class="fa-solid fa-comments"></i> Comment`);
        console.log(err);
        if (!err.responseJSON)
          return displayErrorToast("I couldn't connect to the server!");
        return displayErrorToast(err.responseJSON.message);
      }

      textarea.removeAttr("disabled");
      button.removeAttr("disabled");
      button.toggleClass("disabled");
      button.html(`<i class="fa-solid fa-comments"></i> Comment`);
      textarea.val("");
      displayNotiToast("Comment posted!");
      renderNewestComment(data.data);
    }

    async function renderComments(array) {
      let listComment = $(".comments .list");
      let currentListHTML = listComment.html();
      await Promise.all(
        array.map(async (v) => {
          let usernameFetchData;
          let username;

          try {
            usernameFetchData = await $.ajax({
              url: `/api/users/${v.commenter}`,
              method: "GET",
              accepts: "application/json",
              contentType: "application/json",
            });
          } catch (err) {
            console.log(err);
            if (!err.responseJSON)
              return displayErrorToast("I couldn't connect to the server!");
            return displayErrorToast(err.responseJSON.message);
            username = `Unknown`;
          }

          username = usernameFetchData.user.username || "Unknown";

          let commentTools = "";
          if (v.commenter == "<%= locals.user.id %>")
            commentTools = `<div class="tools">
          <button
            class="editButton"
            onclick="editComment(this)"
            title="Edit this comment"
            data-cmtId=${v.id}
          >
            <i class="fa-solid fa-pen-to-square"></i> Edit
          </button>
          <button
            class="deleteButton"
            title="Delete this comment"
            onclick="deleteComment(this)"
            data-cmtId=${v.id}
          >
            <i class="fa-solid fa-trash-can"></i> Delete
          </button>
        </div>`;

          currentListHTML += `<div class="comment" id="${v.id}">
              <div id="cmtHeader" class="header">
                <img
                  class="avatar"
                  src="https://avatars.dicebear.com/api/initials/${username}.svg"
                  alt=""
                />
                <span>
                  <a class="username" href="/users/${
                    v.commenter
                  }">${username}</a>
                </span>
                <span
                  class="timestamp"
                  data-bs-toggle="tooltip"
                  data-bs-placement="bottom"
                  title="Tooltip on bottom"
                  >${ElapsedTimeConverter(
                    new Date(v.timestamp.seconds * 1000)
                  )}</span
                >
              </div>

              <div class="main">
                <h3 class="text">
                  ${v.description}
                </h3>
              </div>

              ${commentTools}
          </div>`;

          listComment.html(currentListHTML);
        })
      );
    }

    async function renderNewestComment(v) {
      let listComment = $(".comments .list");
      let currentListHTML = listComment.html();

      let usernameFetchData;
      let username;

      try {
        usernameFetchData = await $.ajax({
          url: `/api/users/${v.commenter}`,
          method: "GET",
          accepts: "application/json",
          contentType: "application/json",
        });
      } catch (err) {
        console.log(err);
        if (!err.responseJSON)
          return displayErrorToast("I couldn't connect to the server!");
        return displayErrorToast(err.responseJSON.message);
        username = `Unknown`;
      }

      username = usernameFetchData.user.username || "Unknown";

      let commentContainer = `<div class="comment" id="${v.id}">
              <div id="cmtHeader" class="header">
                <img
                  class="avatar"
                  src="https://avatars.dicebear.com/api/initials/${username}.svg"
                  alt=""
                />
                <span>
                  <a class="username" href="/users/${username}">${username}</a>
                </span>
                <span
                  class="timestamp"
                  data-bs-toggle="tooltip"
                  data-bs-placement="bottom"
                  title="Tooltip on bottom"
                  >${ElapsedTimeConverter(
                    new Date(v.timestamp.seconds * 1000)
                  )}</span
                >
              </div>

              <div class="main">
                <h3 class="text">
                  ${v.description}
                </h3>
              </div>

              ${
                v.commenter != "<%= locals.user.id %>"
                  ? ""
                  : `<div class="tools">
          <button
            class="editButton"
            onclick="editComment(this)"
            title="Edit this comment"
          >
            <i class="fa-solid fa-pen-to-square"></i> Edit
          </button>
          <button
            class="deleteButton"
            title="Delete this comment"
            onclick="deleteComment(this)"
          >
            <i class="fa-solid fa-trash-can"></i> Delete
          </button>
        </div>`
              }
            </div>`;

      currentListHTML = commentContainer + currentListHTML;

      listComment.html(currentListHTML);
    }

    async function deleteComment(button) {
      let confirmation = confirm(
        `Are you sure you want to delete this comment?`
      );

      if (!confirmation) return;

      let cmtId = button.dataset.cmtid || null;
      let deleteFetchData;

      button.setAttribute("disabled", "disabled");
      button.classList.toggle("disabled");
      button.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
              <span>Handling...</span>`;

      try {
        deleteFetchData = await $.ajax({
          url: `/api/comments/`,
          method: "DELETE",
          accepts: "application/json",
          contentType: "application/json",
          headers: {
            authorization: '<%= cookies.accessToken || "" %>',
          },
          data: JSON.stringify({
            id: cmtId,
          }),
        });
      } catch (err) {
        console.log(err);
        button.removeAttribute("disabled");
        button.classList.toggle("disabled");
        button.innerHTML = `<i class="fa-solid fa-trash-can"></i> Delete`;
        if (!err.responseJSON)
          return displayErrorToast("I couldn't connect to the server!");
        return displayErrorToast(err.responseJSON.message);
      }
      if (
        deleteFetchData.statusCode >= 200 &&
        deleteFetchData.statusCode < 300
      ) {
        displayNotiToast("Deleted the comment successfully");
        location.reload();
      } else {
        displayErrorToast(deleteFetchData.message);
      }
    }

    async function editComment(button) {
      let cmtId = button.dataset.cmtid;
      let cmtContainer = document.querySelector(`div#${cmtId}`);
      if (!cmtContainer)
        return displayErrorToast("I couldn't edit this comment!");
      if (editing == true) {
        editing = false;
        let editText = document.querySelector(`div#${cmtId} textarea`);
        if (!editText)
          return displayErrorToast("I couldn't edit this comment!");
        let value = editText.value;
        button.setAttribute("disabled", "disabled");
        button.classList.toggle("disabled");
        button.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
              <span>Handling...</span>`;

        let editFetchData;

        try {
          editFetchData = await $.ajax({
            url: `/api/comments/`,
            method: "PATCH",
            accepts: "application/json",
            contentType: "application/json",
            headers: {
              authorization: '<%= cookies.accessToken || "" %>',
            },
            data: JSON.stringify({
              id: cmtId,
              description: value,
            }),
          });
        } catch (err) {
          console.log(err);
          button.removeAttribute("disabled");
          button.classList.toggle("disabled");
          button.innerHTML = `<i class="fa-solid fa-pen-to-square"></i> Edit`;
          if (!err.responseJSON)
            return displayErrorToast("I couldn't connect to the server!");
          return displayErrorToast(err.responseJSON.message);
        }

        if (
          editFetchData.statusCode >= 200 &&
          editFetchData.statusCode < 300
        ) {
          displayNotiToast("Edited the comment successfully");
          location.reload();
        } else {
          displayErrorToast(editFetchData.message);
        }
      } else {
        let oldDescContainer = document.querySelector(`div#${cmtId} .text`);
        if(!oldDescContainer) return displayErrorToast("I couldn't edit this comment!");
        let desc = oldDescContainer.innerText || oldDescContainer.innerHTML;
        let mainContainer = document.querySelector(`div#${cmtId} .main`);
        mainContainer.innerHTML = `<textarea class="textComment">${desc}</textarea>`;
        alert("Click the Edit button one more time to save your changes")
        editing = true;
      }
    }

    async function loadComments() {
      let fetchLinks = `/api/comments/${id}/@list`;
      let fetchData;
      let comments;

      try {
        fetchData = await $.ajax({
          url: fetchLinks,
          method: "GET",
          accepts: "application/json",
          contentType: "application/json",
          data: JSON.stringify({
            blogId: id,
          }),
        });
      } catch (err) {
        console.log(err);
        if (!err.responseJSON)
          return displayErrorToast("I couldn't connect to the server!");
        return displayErrorToast(err.responseJSON.message);
      }

      comments = fetchData.data;
      console.log(comments);
      renderComments(comments);
    }
  </script>
</html>

<style>
  :root {
    --commentTextArea-width: 500px;
    --tool-width: 100px;
  }

  #content #header {
    margin-bottom: 20px;
  }

  .tools {
    margin-bottom: 20px;
    display: flex;
    flex-direction: row;
  }

  .tools button,
  .toolButton {
    width: var(--tool-width);
    border: 1px solid #d3d3d3;
    padding: 10px;
    margin-bottom: 10px;
    margin-right: 10px;
  }

  .tools button:not([disabled]):hover,
  .toolButton:not([disabled]):hover {
    background-color: #d3d3d3;
  }

  #main .title {
    margin-bottom: 20px;
    font-weight: bold;
  }

  #main .description {
    overflow-wrap: anywhere;
  }

  #content #header .avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
  }

  #content #header span a {
    text-decoration: none;
  }

  #content #header span a:hover {
    text-decoration: underline;
  }

  .authorOnly {
    display: none;
  }

  .comments .textComment {
    margin-top: 5px;
    resize: vertical;
    resize: none;
    width: var(--commentTextArea-width);
    height: 125px;
    padding: 10px;
    border: 1px solid #d3d3d3;
  }

  .comments #commentHeader {
    display: flex;
    flex-direction: column;
    padding-bottom: 25px;
    border-bottom: 1px solid #d3d3d3;
  }

  .commentButton {
    width: var(--commentTextArea-width);
    margin-top: 5px;
  }

  .list {
    margin-top: 25px;
  }

  .list .comment {
    border-radius: 8px;
    padding: 10px;
    margin-bottom: 20px;
  }

  .list .comment .avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
  }

  .list .comment .header {
    margin-bottom: 20px;
  }

  .list .comment .header a {
    text-decoration: none;
  }

  .list .comment .header a:hover {
    text-decoration: underline;
  }

  .list .comment .text {
    font-size: 16px;
  }

  @media screen and (max-width: 1000px) {
    :root {
      --tool-width: 100%;
    }

    .tools {
      flex-direction: column;
    }

    .tools button,
    .toolButton {
      padding: 30px;
      margin-bottom: 30px;
    }
  }
</style>
