<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= page.title %></title>
    <%- include('../partials/components.ejs') %>
  </head>
  <body>
    <div class="interaction">
      <div class="toasts"></div>
      <%- include('../partials/sidebar.ejs') %>
      <div id="content">
        <div class="w-100" id="btn-container">
          <button
            class="submit-btn create-btn"
            onclick="location.href = '/blogs/create'"
          >
            <span><i class="fa-regular fa-calendar-plus"></i></span>
            <span>Create a blog</span>
          </button>
        </div>

        <!-- <div class="filterTool">
          <div class="blogAuthorFilter">
            <i class="fa-solid fa-user"></i>
            <span>User: </span>
          </div>
          <div class="blogCategoryFilter"></div>
        </div> -->

        <div class="blogs"></div>
      </div>
    </div>
  </body>
  <script type="text/javascript">
    let totalBlogs = 1;
    let requestMore = 10;
    let infiniteScrollEnabled = true;
    let isLoading = false;
    let noticed = false;
    const renderedBlogs = [];

    async function infiniteScroll() {
      if (infiniteScrollEnabled == false || isLoading) return;
      isLoading = true;
      let blogs = await getAndRenderBlogs();
      if (!Array.isArray(blogs) || blogs == false) {
        infiniteScrollEnabled = false;
        if (noticed == false) {
          displayNotiToast("You have reached the end!");
          noticed = true;
        }
      }
      isLoading = false;
    }

    async function getAndRenderBlogs() {
      let blogs = await getMoreBlog();
      if (!blogs) {
        displayErrorToast("I couldn't retrieve more blogs!");
        return false;
      }
      await renderMoreBlog(blogs);
      return blogs;
    }

    async function getMoreBlog() {
      let range = `${totalBlogs || 1}-${totalBlogs + requestMore || 10}`;
      const limitedToThisAuthor = `<%= query.author %>`
      let blogFetchLink = `/api/blogs/@list?range=${range}`;
      if (limitedToThisAuthor) {
        blogFetchLink += `&author=${limitedToThisAuthor}`;
        let usernameFetchData;
        let username;

        try {
          usernameFetchData = await $.ajax({
            url: `/api/users/${limitedToThisAuthor}`,
            method: "GET",
            accepts: "application/json",
            contentType: "application/json",
          });
        } catch (err) {
          console.log(err);
          if (!err.responseJSON)
            return displayErrorToast("I couldn't connect to the server!");
          return displayErrorToast(err.responseJSON.message);
          username = `Unknown`;
        }

        username = usernameFetchData?.user?.username;
        if(!username) {
          alert("You are viewing a non-existing person's blog list! Please click OK to return to the home page");
          location.href = "/";
        }
        displayNotiToast(`You are viewing <strong>${username}</strong>'s blog list`);
      }
      console.log(blogFetchLink);
      try {
        blogsFetchData = await $.ajax({
          url: blogFetchLink,
          method: "GET",
          accepts: "application/json",
          contentType: "application/json",
        });
      } catch (err) {
        console.log(err);
        document.querySelector("#content").style.display = "none";
        hideLoadingIcon();
        if (!err.responseJSON) {
          displayErrorToast("I couldn't connect to the server!");
          return null;
        }
        displayErrorToast(err.responseJSON.message);
        return null;
      }

      const blogs = blogsFetchData.data;
      if (!blogs) {
        displayErrorToast("I couldn't retrieve any blogs! Please try again!");
        return [];
      }

      totalBlogs += blogs.length;

      return blogs;
    }

    async function renderMoreBlog(array) {
      array = array.filter((v) => !renderedBlogs.includes(v.id));
      await Promise.all(
        array.map(async (v) => {
          if (renderedBlogs.includes(v.id)) return;
          const postedDate = new Date(0);
          postedDate.setUTCSeconds(v.timestamp.seconds);

          let usernameFetchData;
          let username;

          try {
            usernameFetchData = await $.ajax({
              url: `/api/users/${v.author}`,
              method: "GET",
              accepts: "application/json",
              contentType: "application/json",
            });
          } catch (err) {
            console.log(err);
            if (!err.responseJSON)
              return displayErrorToast("I couldn't connect to the server!");
            return displayErrorToast(err.responseJSON.message);
            username = `Unknown`;
          }

          username = usernameFetchData.user.username;

          document.querySelector(
            ".blogs"
          ).innerHTML += `<div class="blog" onclick="location.href = '/blogs/${
            v.id
          }'">
            <div class="header">
              <img class="avatar" src="https://avatars.dicebear.com/api/initials/${username}.svg" alt="">
              <span
                >Posted by
                <a class="username" href="/users/${v.author}">${username}</a>
              </span>
              <span
                class="timestamp"
                data-bs-toggle="tooltip"
                data-bs-placement="top"
                title="${postedDate}"
                >${ElapsedTimeConverter(postedDate)}</span
              >
            </div>

            <div class="main">
              <h3 class="title">${v.title}</h3>
            </div>
          </div>`;
          renderedBlogs.push(v.id);
        })
      );
    }
    document.addEventListener("DOMContentLoaded", () => {
      jQuery(document).ready(async function ($) {
        showLoadingIcon();

        await getAndRenderBlogs();

        hideLoadingIcon();

        $(window).scroll(() => {
          if (
            $(window).scrollTop() + $(window).height() >=
              $(document).height() &&
            infiniteScrollEnabled == true
          ) {
            infiniteScroll();
          }
        });
      });
    });
  </script>
</html>

<style>
  .submit-btn {
    margin-bottom: 50px;
    width: 100%;
    margin-top: 20px;
    height: 38px;
    border-radius: 50px;
  }

  .blog {
    border: 1px solid #d3d3d3;
    border-radius: 8px;
    padding: 10px;
    cursor: pointer;
    margin-bottom: 20px;
  }

  .blog .avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
  }

  .blog:hover {
    opacity: 0.7;
  }

  .blog .header {
    margin-bottom: 20px;
  }

  .blog .header a {
    text-decoration: none;
  }

  .blog .header a:hover {
    text-decoration: underline;
  }

  .blog .main .title {
    font-weight: bold;
  }
</style>
